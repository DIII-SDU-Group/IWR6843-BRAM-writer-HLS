// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmWBramWriter_mmWBramWriter,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.950000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=270,HLS_SYN_LUT=587,HLS_VERSION=2020_2}" *)

module mmWBramWriter (
        ap_clk,
        ap_rst_n,
        buffer_in_address0,
        buffer_in_ce0,
        buffer_in_q0,
        buffer_out_address0,
        buffer_out_ce0,
        buffer_out_we0,
        buffer_out_d0,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_pp0_stage0 = 8'd2;
parameter    ap_ST_fsm_state4 = 8'd4;
parameter    ap_ST_fsm_state5 = 8'd8;
parameter    ap_ST_fsm_state6 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_state8 = 8'd64;
parameter    ap_ST_fsm_state9 = 8'd128;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [4:0] buffer_in_address0;
output   buffer_in_ce0;
input  [127:0] buffer_in_q0;
output  [7:0] buffer_out_address0;
output   buffer_out_ce0;
output   buffer_out_we0;
output  [31:0] buffer_out_d0;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg buffer_in_ce0;
reg[7:0] buffer_out_address0;
reg buffer_out_ce0;
reg buffer_out_we0;
reg[31:0] buffer_out_d0;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [5:0] i_reg_170;
reg   [0:0] last_point_reg_182;
reg   [31:0] n_points_1_reg_194;
wire   [5:0] add_ln30_fu_218_p2;
reg   [5:0] add_ln30_reg_384;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln30_fu_224_p2;
reg   [0:0] icmp_ln30_reg_389;
wire   [63:0] i_cast_fu_230_p1;
reg   [63:0] i_cast_reg_393;
wire   [31:0] n_points_fu_257_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] last_point_1_fu_265_p2;
wire   [31:0] add_ln54_fu_280_p2;
reg   [31:0] add_ln54_reg_413;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln54_fu_291_p2;
wire   [5:0] trunc_ln60_fu_297_p1;
reg   [5:0] trunc_ln60_reg_426;
wire   [7:0] shl_ln_fu_312_p3;
reg   [7:0] shl_ln_reg_431;
wire    ap_CS_fsm_state6;
reg   [31:0] p_Result_1_reg_438;
reg   [31:0] p_Result_2_reg_443;
wire   [31:0] trunc_ln708_fu_350_p1;
reg   [31:0] trunc_ln708_reg_448;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [4:0] buffer_V_address0;
reg    buffer_V_ce0;
reg    buffer_V_we0;
wire   [127:0] buffer_V_d0;
wire   [127:0] buffer_V_q0;
reg   [5:0] ap_phi_mux_i_phi_fu_174_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] i_1_reg_207;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln54_fu_286_p1;
wire   [63:0] zext_ln57_fu_325_p1;
wire   [63:0] zext_ln58_fu_359_p1;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln59_fu_369_p1;
wire    ap_CS_fsm_state8;
wire   [63:0] zext_ln60_fu_379_p1;
wire   [4:0] trunc_ln32_fu_241_p1;
wire   [31:0] zext_ln32_fu_245_p1;
wire   [0:0] icmp_ln870_fu_235_p2;
wire   [31:0] select_ln32_fu_249_p3;
wire   [7:0] or_ln57_fu_319_p2;
wire   [7:0] or_ln58_fu_354_p2;
wire   [7:0] or_ln59_fu_364_p2;
wire   [7:0] add_ln60_fu_374_p2;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

mmWBramWriter_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

mmWBramWriter_buffer_V #(
    .DataWidth( 128 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
buffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_V_address0),
    .ce0(buffer_V_ce0),
    .we0(buffer_V_we0),
    .d0(buffer_V_d0),
    .q0(buffer_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_207 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_1_reg_207 <= add_ln54_reg_413;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_170 <= 6'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_389 == 1'd0))) begin
        i_reg_170 <= add_ln30_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        last_point_reg_182 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_389 == 1'd0))) begin
        last_point_reg_182 <= last_point_1_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        n_points_1_reg_194 <= 32'd32;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_389 == 1'd0))) begin
        n_points_1_reg_194 <= n_points_fu_257_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln30_reg_384 <= add_ln30_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln54_reg_413 <= add_ln54_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln30_fu_224_p2 == 1'd0))) begin
        i_cast_reg_393[5 : 0] <= i_cast_fu_230_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln30_reg_389 <= icmp_ln30_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Result_1_reg_438 <= {{buffer_V_q0[95:64]}};
        p_Result_2_reg_443 <= {{buffer_V_q0[63:32]}};
        shl_ln_reg_431[7 : 2] <= shl_ln_fu_312_p3[7 : 2];
        trunc_ln708_reg_448 <= trunc_ln708_fu_350_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_291_p2 == 1'd0))) begin
        trunc_ln60_reg_426 <= trunc_ln60_fu_297_p1;
    end
end

always @ (*) begin
    if ((icmp_ln30_fu_224_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_291_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_389 == 1'd0))) begin
        ap_phi_mux_i_phi_fu_174_p4 = add_ln30_reg_384;
    end else begin
        ap_phi_mux_i_phi_fu_174_p4 = i_reg_170;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_291_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        buffer_V_address0 = zext_ln54_fu_286_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        buffer_V_address0 = i_cast_reg_393;
    end else begin
        buffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        buffer_V_ce0 = 1'b1;
    end else begin
        buffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_reg_389 == 1'd0))) begin
        buffer_V_we0 = 1'b1;
    end else begin
        buffer_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        buffer_in_ce0 = 1'b1;
    end else begin
        buffer_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        buffer_out_address0 = zext_ln60_fu_379_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_out_address0 = zext_ln59_fu_369_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_out_address0 = zext_ln58_fu_359_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_out_address0 = zext_ln57_fu_325_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_out_address0 = 64'd0;
    end else begin
        buffer_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        buffer_out_ce0 = 1'b1;
    end else begin
        buffer_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        buffer_out_d0 = trunc_ln708_reg_448;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buffer_out_d0 = p_Result_2_reg_443;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buffer_out_d0 = p_Result_1_reg_438;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buffer_out_d0 = {{buffer_V_q0[127:96]}};
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buffer_out_d0 = n_points_1_reg_194;
    end else begin
        buffer_out_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state6))) begin
        buffer_out_we0 = 1'b1;
    end else begin
        buffer_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln30_fu_224_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln30_fu_224_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln54_fu_291_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_fu_218_p2 = (ap_phi_mux_i_phi_fu_174_p4 + 6'd1);

assign add_ln54_fu_280_p2 = (i_1_reg_207 + 32'd1);

assign add_ln60_fu_374_p2 = (shl_ln_reg_431 + 8'd4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign buffer_V_d0 = ((last_point_1_fu_265_p2[0:0] == 1'b1) ? 128'd0 : buffer_in_q0);

assign buffer_in_address0 = i_cast_fu_230_p1;

assign i_cast_fu_230_p1 = ap_phi_mux_i_phi_fu_174_p4;

assign icmp_ln30_fu_224_p2 = ((ap_phi_mux_i_phi_fu_174_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_291_p2 = ((i_1_reg_207 == n_points_1_reg_194) ? 1'b1 : 1'b0);

assign icmp_ln870_fu_235_p2 = ((buffer_in_q0 == 128'd0) ? 1'b1 : 1'b0);

assign last_point_1_fu_265_p2 = (last_point_reg_182 | icmp_ln870_fu_235_p2);

assign n_points_fu_257_p3 = ((icmp_ln870_fu_235_p2[0:0] == 1'b1) ? select_ln32_fu_249_p3 : n_points_1_reg_194);

assign or_ln57_fu_319_p2 = (shl_ln_fu_312_p3 | 8'd1);

assign or_ln58_fu_354_p2 = (shl_ln_reg_431 | 8'd2);

assign or_ln59_fu_364_p2 = (shl_ln_reg_431 | 8'd3);

assign select_ln32_fu_249_p3 = ((last_point_reg_182[0:0] == 1'b1) ? n_points_1_reg_194 : zext_ln32_fu_245_p1);

assign shl_ln_fu_312_p3 = {{trunc_ln60_reg_426}, {2'd0}};

assign trunc_ln32_fu_241_p1 = i_reg_170[4:0];

assign trunc_ln60_fu_297_p1 = i_1_reg_207[5:0];

assign trunc_ln708_fu_350_p1 = buffer_V_q0[31:0];

assign zext_ln32_fu_245_p1 = trunc_ln32_fu_241_p1;

assign zext_ln54_fu_286_p1 = i_1_reg_207;

assign zext_ln57_fu_325_p1 = or_ln57_fu_319_p2;

assign zext_ln58_fu_359_p1 = or_ln58_fu_354_p2;

assign zext_ln59_fu_369_p1 = or_ln59_fu_364_p2;

assign zext_ln60_fu_379_p1 = add_ln60_fu_374_p2;

always @ (posedge ap_clk) begin
    i_cast_reg_393[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    shl_ln_reg_431[1:0] <= 2'b00;
end

endmodule //mmWBramWriter
